name: Promote Build
on:
  workflow_dispatch:
    inputs:
      app_name:
        description: 'App to promote'
        required: true
        type: choice
        options:
          - python-fast-api
          - node-backed-api
      source_env:
        description: 'Source environment'
        required: true
        type: choice
        options:
          - test
          - qa
          - prod
      target_env:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - test
          - qa
          - prod

jobs:
  review_deployment:
    name: "📋 Review Deployment"
    runs-on: ubuntu-latest
    outputs:
      needs_promotion: ${{ steps.check.outputs.needs_promotion }}
      source_tag: ${{ steps.check.outputs.source_tag }}
      target_tag: ${{ steps.check.outputs.target_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: "🔍 Validate environments"
        run: |
          if [[ "${{ inputs.source_env }}" == "${{ inputs.target_env }}" ]]; then
            echo "❌ Error: Source and target environments cannot be the same"
            exit 1
          fi
          
      - name: Check promotion requirements
        id: check
        run: |
          echo "🔍 Analyzing promotion from ${{ inputs.source_env }} to ${{ inputs.target_env }}"
          
          SOURCE_TAG=$(yq eval '.key.components[] | select(.name == "${{ inputs.app_name }}") | .appImageTagName' environments/${{ inputs.source_env }}/applist.yaml)
          TARGET_TAG=$(yq eval '.key.components[] | select(.name == "${{ inputs.app_name }}") | .appImageTagName' environments/${{ inputs.target_env }}/applist.yaml)
          
          if [[ -z "$SOURCE_TAG" || "$SOURCE_TAG" == "null" ]]; then
            echo "❌ Error: App '${{ inputs.app_name }}' not found in ${{ inputs.source_env }}"
            exit 1
          fi
          
          if [[ -z "$TARGET_TAG" || "$TARGET_TAG" == "null" ]]; then
            echo "❌ Error: App '${{ inputs.app_name }}' not found in ${{ inputs.target_env }}"
            exit 1
          fi
          
          echo "source_tag=$SOURCE_TAG" >> $GITHUB_OUTPUT
          echo "target_tag=$TARGET_TAG" >> $GITHUB_OUTPUT
          
          echo "📊 Current Status:"
          echo "   Source (${{ inputs.source_env }}): $SOURCE_TAG"
          echo "   Target (${{ inputs.target_env }}): $TARGET_TAG"
          
          if [[ "$SOURCE_TAG" == "$TARGET_TAG" ]]; then
            echo "needs_promotion=false" >> $GITHUB_OUTPUT
            echo "✅ No promotion needed - versions already match"
          else
            echo "needs_promotion=true" >> $GITHUB_OUTPUT
            echo "🚀 Promotion required: $TARGET_TAG → $SOURCE_TAG"
          fi

  execute_promotion:
    name: "🚀 Execute Promotion"
    environment: 
      name: ${{ inputs.target_env }}
      url: https://www.${{ inputs.target_env }}.example.com/${{ inputs.app_name }}/version
    runs-on: ubuntu-latest
    needs: [review_deployment]
    if: needs.review_deployment.outputs.needs_promotion == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Update target environment
        run: |
          echo "🔄 Updating ${{ inputs.app_name }} in ${{ inputs.target_env }}"
          echo "   From: ${{ needs.review_deployment.outputs.target_tag }}"
          echo "   To: ${{ needs.review_deployment.outputs.source_tag }}"
          
          CURRENT_TAG="${{ needs.review_deployment.outputs.target_tag }}"
          NEW_TAG="${{ needs.review_deployment.outputs.source_tag }}"
          
          sed -i "/- name: ${{ inputs.app_name }}/,/<<: \*defaultValues/ s/appImageTagName: $CURRENT_TAG/appImageTagName: $NEW_TAG/" environments/${{ inputs.target_env }}/applist.yaml
          
          echo "✅ File updated successfully"
          
      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add environments/${{ inputs.target_env }}/applist.yaml
          git commit -m "🚀 Promote ${{ inputs.app_name }} from ${{ inputs.source_env }} to ${{ inputs.target_env }}: ${{ needs.review_deployment.outputs.source_tag }}"
          git push
          
          echo "✅ Changes committed and pushed to repository"

  skip_promotion:
    name: "⏭️ Skip Promotion"
    runs-on: ubuntu-latest
    needs: [review_deployment]
    if: needs.review_deployment.outputs.needs_promotion == 'false'
    steps:
      - name: Log skip reason
        run: |
          echo "ℹ️ Promotion skipped for ${{ inputs.app_name }}"
          echo "   Environment: ${{ inputs.target_env }}"
          echo "   Current tag: ${{ needs.review_deployment.outputs.source_tag }}"
          echo "   Reason: Target environment already has the same version"

  deployment_summary:
    name: "📝 Deployment Summary"
    runs-on: ubuntu-latest
    needs: [review_deployment, execute_promotion, skip_promotion]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "## 📋 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Application:** ${{ inputs.app_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Source Environment:** ${{ inputs.source_env }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Environment:** ${{ inputs.target_env }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.review_deployment.outputs.needs_promotion }}" == "true" ]]; then
            if [[ "${{ needs.execute_promotion.result }}" == "success" ]]; then
              echo "**Status:** ✅ Successfully promoted" >> $GITHUB_STEP_SUMMARY
              echo "**Version Change:** ${{ needs.review_deployment.outputs.target_tag }} → ${{ needs.review_deployment.outputs.source_tag }}" >> $GITHUB_STEP_SUMMARY
            else
              echo "**Status:** ❌ Promotion failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "**Status:** ⏭️ No promotion needed" >> $GITHUB_STEP_SUMMARY
            echo "**Current Version:** ${{ needs.review_deployment.outputs.source_tag }}" >> $GITHUB_STEP_SUMMARY
          fi